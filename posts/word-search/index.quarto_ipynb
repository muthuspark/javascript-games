{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Word Search Game\"\n",
        "date: \"02/04/2024\"\n",
        "categories: [ Puzzles ]\n",
        "---\n",
        "\n",
        "```{javascript}\n",
        "/// Word finder game\n",
        "\n",
        "const words = ['JAVASCRIPT', 'HTML', 'CSS', 'REACT', 'NODE', 'PYTHON', 'JAVA', 'RUBY'];\n",
        "const gridSize = 10;\n",
        "let grid = [];\n",
        "let selectedCells = [];\n",
        "\n",
        "function generateGrid() {\n",
        "    grid = [];\n",
        "    for (let i = 0; i < gridSize; i++) {\n",
        "        grid[i] = [];\n",
        "        for (let j = 0; j < gridSize; j++) {\n",
        "            grid[i][j] = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n",
        "        }\n",
        "    }\n",
        "\n",
        "    // Place words in the grid\n",
        "    words.forEach(word => {\n",
        "        const direction = Math.floor(Math.random() * 3); // 0: horizontal, 1: vertical, 2: diagonal\n",
        "        let row, col;\n",
        "        \n",
        "        do {\n",
        "            if (direction === 0) { // horizontal\n",
        "                row = Math.floor(Math.random() * gridSize);\n",
        "                col = Math.floor(Math.random() * (gridSize - word.length + 1));\n",
        "            } else if (direction === 1) { // vertical\n",
        "                row = Math.floor(Math.random() * (gridSize - word.length + 1));\n",
        "                col = Math.floor(Math.random() * gridSize);\n",
        "            } else { // diagonal\n",
        "                row = Math.floor(Math.random() * (gridSize - word.length + 1));\n",
        "                col = Math.floor(Math.random() * (gridSize - word.length + 1));\n",
        "            }\n",
        "        } while (!canPlaceWord(word, row, col, direction));\n",
        "\n",
        "        placeWord(word, row, col, direction);\n",
        "    });\n",
        "}\n",
        "\n",
        "function canPlaceWord(word, row, col, direction) {\n",
        "    for (let i = 0; i < word.length; i++) {\n",
        "        let currentRow = row + (direction === 1 || direction === 2 ? i : 0);\n",
        "        let currentCol = col + (direction === 0 || direction === 2 ? i : 0);\n",
        "        \n",
        "        if (grid[currentRow][currentCol] !== word[i] && grid[currentRow][currentCol] !== String.fromCharCode(65 + Math.floor(Math.random() * 26))) {\n",
        "            return false;\n",
        "        }\n",
        "    }\n",
        "    return true;\n",
        "}\n",
        "\n",
        "function placeWord(word, row, col, direction) {\n",
        "    for (let i = 0; i < word.length; i++) {\n",
        "        let currentRow = row + (direction === 1 || direction === 2 ? i : 0);\n",
        "        let currentCol = col + (direction === 0 || direction === 2 ? i : 0);\n",
        "        grid[currentRow][currentCol] = word[i];\n",
        "    }\n",
        "}\n",
        "\n",
        "function renderGrid() {\n",
        "    const gridElement = document.getElementById('grid');\n",
        "    gridElement.innerHTML = '';\n",
        "    for (let i = 0; i < gridSize; i++) {\n",
        "        for (let j = 0; j < gridSize; j++) {\n",
        "            const cell = document.createElement('div');\n",
        "            cell.className = 'cell';\n",
        "            cell.textContent = grid[i][j];\n",
        "            cell.dataset.row = i;\n",
        "            cell.dataset.col = j;\n",
        "            cell.addEventListener('mousedown', startSelection);\n",
        "            cell.addEventListener('mouseover', updateSelection);\n",
        "            cell.addEventListener('mouseup', endSelection);\n",
        "            gridElement.appendChild(cell);\n",
        "        }\n",
        "    }\n",
        "}\n",
        "\n",
        "function renderWordList() {\n",
        "    const wordListElement = document.getElementById('word-list');\n",
        "    wordListElement.innerHTML = '';\n",
        "    words.forEach(word => {\n",
        "        const li = document.createElement('li');\n",
        "        li.textContent = word;\n",
        "        li.dataset.word = word;\n",
        "        wordListElement.appendChild(li);\n",
        "    });\n",
        "}\n",
        "\n",
        "function startSelection(e) {\n",
        "    selectedCells = [e.target];\n",
        "    e.target.classList.add('selected');\n",
        "}\n",
        "\n",
        "function updateSelection(e) {\n",
        "    if (e.buttons === 1) {\n",
        "        const lastCell = selectedCells[selectedCells.length - 1];\n",
        "        const currentCell = e.target;\n",
        "        \n",
        "        const rowDiff = Math.abs(currentCell.dataset.row - lastCell.dataset.row);\n",
        "        const colDiff = Math.abs(currentCell.dataset.col - lastCell.dataset.col);\n",
        "        \n",
        "        if ((rowDiff === 0 && colDiff === 1) || // horizontal\n",
        "            (rowDiff === 1 && colDiff === 0) || // vertical\n",
        "            (rowDiff === 1 && colDiff === 1)) { // diagonal\n",
        "            if (!selectedCells.includes(currentCell)) {\n",
        "                selectedCells.push(currentCell);\n",
        "                currentCell.classList.add('selected');\n",
        "            }\n",
        "        }\n",
        "    }\n",
        "}\n",
        "\n",
        "function endSelection() {\n",
        "    const word = selectedCells.map(cell => cell.textContent).join('');\n",
        "    const reversedWord = word.split('').reverse().join('');\n",
        "    \n",
        "    if (words.includes(word) || words.includes(reversedWord)) {\n",
        "        selectedCells.forEach(cell => cell.classList.add('found'));\n",
        "        document.querySelector(`li[data-word=\"${word}\"]`)?.classList.add('found');\n",
        "        document.querySelector(`li[data-word=\"${reversedWord}\"]`)?.classList.add('found');\n",
        "    }\n",
        "    \n",
        "    selectedCells.forEach(cell => cell.classList.remove('selected'));\n",
        "    selectedCells = [];\n",
        "    \n",
        "    checkGameCompletion();\n",
        "}\n",
        "\n",
        "function checkGameCompletion() {\n",
        "    const foundWords = document.querySelectorAll('li.found');\n",
        "    if (foundWords.length === words.length) {\n",
        "        alert('Congratulations! You found all the words!');\n",
        "    }\n",
        "}\n",
        "\n",
        "function newGame() {\n",
        "    generateGrid();\n",
        "    renderGrid();\n",
        "    renderWordList();\n",
        "}\n",
        "\n",
        "document.getElementById('word-finder-new-game').addEventListener('click', newGame);\n",
        "\n",
        "// Initialize the game\n",
        "newGame();\n",
        "```"
      ],
      "id": "3979d58b"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}